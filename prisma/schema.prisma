// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  emailValidated Boolean   @default(false)
  email_sent     Boolean   @default(false)
  password       String
  name           String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  transactions Transaction[] // a user can have multiple transactions
  wallets      Wallet[] // a user can have several wallets
  categories   Category[] // a user can have several categories
  tags         Tag[] // a user can have several tags
  budget       Budget[]

  @@map(name: "users")
}

model Transaction {
  id          Int       @id @default(autoincrement())
  date        DateTime
  amount      Decimal
  description String
  type        String
  repeat      String
  next_date   DateTime?
  active      Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  userId String //* Esta columna almacenará la clave foránea (foreign key)
  user   User   @relation(fields: [userId], references: [id])

  walletId Int // Clave foránea
  wallet   Wallet @relation(fields: [walletId], references: [id])

  categoryId Int // Clave foránea
  category   Category @relation(fields: [categoryId], references: [id])

  tags Tag[]
}

model Wallet {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  balance     Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactions Transaction[] // Un Wallet puede tener múltiples transacciones
  BudgetWallet BudgetWallet[]
}

model Category {
  id               Int              @id @default(autoincrement())
  name             String
  icon             String           @db.VarChar(100)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  userId           String
  User             User?            @relation(fields: [userId], references: [id])
  Transaction      Transaction[]
  BudgetCategories BudgetCategory[]
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  transactionId Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Budget {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  initial_date     DateTime
  end_date         DateTime
  limit_amount     Decimal
  current_amount   Decimal
  repeat           String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  userId           String
  User             User?            @relation(fields: [userId], references: [id])
  BudgetCategories BudgetCategory[]
  BudgetWallet     BudgetWallet[]
}

model BudgetWallet {
  budgetId Int
  walletId Int
  budget   Budget @relation(fields: [budgetId], references: [id])
  wallet   Wallet @relation(fields: [walletId], references: [id])

  @@id([budgetId, walletId])
}

model BudgetCategory {
  budgetId   Int
  categoryId Int
  budget     Budget   @relation(fields: [budgetId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([budgetId, categoryId])
}

model Audists {
  id         String    @id @default(uuid())
  id_class   String
  class_name String
  data       String
  type       String
  user       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // role String
  // permissions String
  @@map(name: "audists")
}
