// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  emailValidated Boolean   @default(false)
  email_sent     Boolean   @default(false)
  password       String
  name           String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  transactions       Transaction[] // a user can have multiple transactions
  wallets            Wallet[] // a user can have several wallets
  categories         Category[] // a user can have several categories
  tags               Tag[] // a user can have several tags
  budget             Budget[]
  Notification       Notification[]
  Verification_codes Verification_codes[]

  @@map(name: "users")
}

model Verification_codes {
  id         Int      @id @default(autoincrement())
  code       String
  expired_at DateTime
  used       Boolean?
  active     Boolean
  userId     String //* Esta columna almacenará la clave foránea (foreign key)
  user       User     @relation(fields: [userId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Transaction {
  id          Int       @id @default(autoincrement())
  date        DateTime
  amount      Float
  name        String
  description String
  type        String
  repeat      String
  next_date   DateTime?
  active      Boolean

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  userId String //* Esta columna almacenará la clave foránea (foreign key)
  user   User   @relation(fields: [userId], references: [id])

  walletId Int // Clave foránea
  wallet   Wallet @relation(fields: [walletId], references: [id])

  categoryId Int // Clave foránea
  category   Category @relation(fields: [categoryId], references: [id])

  tags              Tag[]
  BudgetTransaction BudgetTransaction[]
}

model Wallet {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  initial_balance Float         @default(0)
  balance         Float         @default(0)
  incomes         Float         @default(0)
  expenses        Float         @default(0)
  main_account    Boolean       @default(false)
  type_account    String        @default("DEBIT")
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  deleted_at      DateTime?
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  transactions    Transaction[]

  budgets Budget[] // Este es el campo nuevo que se añade a Wallet
}

model Category {
  id               Int              @id @default(autoincrement())
  name             String
  icon             String           @db.VarChar(100)
  color            String           @default("") @db.VarChar(20)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  userId           String
  User             User?            @relation(fields: [userId], references: [id])
  Transaction      Transaction[]
  BudgetCategories BudgetCategory[]
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  transactionId Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Budget {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  date             DateTime
  end_date         DateTime
  limit_amount     Decimal
  current_amount   Decimal
  repeat           String
  percentage       Decimal
  next_date        DateTime?
  active           Boolean
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deleted_at       DateTime?
  userId           String
  User             User?            @relation(fields: [userId], references: [id])
  BudgetCategories BudgetCategory[]

  walletId          Int // Esto es nuevo
  Wallet            Wallet              @relation(fields: [walletId], references: [id]) // Y esto también es nuevo
  BudgetTransaction BudgetTransaction[]
}

model BudgetCategory {
  budgetId   Int
  categoryId Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  budget     Budget    @relation(fields: [budgetId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  @@id([budgetId, categoryId])
}

model BudgetTransaction {
  id            Int      @id @default(autoincrement())
  budgetId      Int // Relación con Budget
  transactionId Int // Relación con Transaction
  createdAt     DateTime @default(now())

  // Relaciones
  budget      Budget      @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@unique([budgetId, transactionId]) // Evita duplicados
  @@map("budget_transaction") // Nombre de la tabla en la base de datos
}

model Audists {
  id         String    @id @default(uuid())
  id_class   String
  class_name String
  data       String
  type       String
  user       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // role String
  // permissions String
  @@map(name: "audists")
}

model Notification {
  id      Int     @id @default(autoincrement())
  message String
  title   String
  read    Boolean

  userId String
  User   User?  @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
